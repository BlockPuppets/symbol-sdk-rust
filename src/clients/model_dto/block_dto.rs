#[serde(rename_all = "camelCase")]
#[derive(Clone, Debug, Serialize, Deserialize)]
pub struct BlockDto {
    /// A number that allows uint 32 values.
    pub size: u32,
    /// Entity's signature generated by the signer.
    pub signature: String,
    /// Public key.
    pub signer_public_key: String,
    /// Entity version.
    pub version: u8,
    pub network: u8,
    #[serde(rename = "type")]
    pub type_field: u16,
    /// Height of the blockchain.
    pub height: String,
    pub timestamp: String,
    /// Determines how hard is to harvest a new block, based on previous blocks.
    pub difficulty: String,
    /// 32-bytes VRF proof gamma.
    pub proof_gamma: String,
    /// 16-bytes VRF proof verification hash.
    pub proof_verification_hash: String,
    /// 32-bytes VRF proof scalar.
    pub proof_scalar: String,
    pub previous_block_hash: String,
    pub transactions_hash: String,
    pub receipts_hash: String,
    pub state_hash: String,
    /// Address expressed in hexadecimal base.
    pub beneficiary_address: String,
    /// Fee multiplier applied to transactions contained in block.
    pub fee_multiplier: u64,

    pub voting_eligible_accounts_count: Option<u32>,
    /// A number that allows uint 64 values represented with a string.
    pub harvesting_eligible_accounts_count: Option<String>,
    /// Absolute amount. An amount of 123456789 (absolute) for a mosaic with divisibility 6 means 123.456789 (relative).
    pub total_voting_balance: Option<String>,
    pub previous_importance_block_hash: Option<String>,
}
